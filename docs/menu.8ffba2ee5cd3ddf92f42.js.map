{"version":3,"sources":["webpack:///./src/lazy.js","webpack:///./src/with-huge.tsx","webpack:///./src/small.jsx","webpack:///./src/menu.tsx","webpack:///./src/some-package/index.ts"],"names":["debouncedPromisesCache","Map","WithHuge","hugeSize","setHugeSize","cacheKey","promiseFn","timeout","has","get","promise","Promise","resolve","reject","window","addEventListener","setTimeout","then","once","set","debouncePromiseOnLoad","huge","length","style","backgroundColor","className","Small","console","log","render","from","document","getElementById","onload"],"mappings":"8IAAMA,EAAyB,IAAIC,ICGpB,SAASC,EAAS,GAAM,O,IAC/B,EAA0B,mBAAS,GAAlCC,EAAQ,KAAEC,EAAW,KAU5B,OARA,qBAAU,YDKL,SAA+BC,EAAUC,GAAwB,IAAbC,EAAa,uDAAH,EACnE,GAAIP,EAAuBQ,IAAIH,GAC7B,OAAOL,EAAuBS,IAAIJ,GAGpC,IAAMK,EAAU,IAAIC,SAAQ,SAACC,EAASC,GACpCC,OAAOC,iBAAiB,QACtB,WACEC,YAAW,WACTV,IAAYW,KAAKL,EAASC,KACzBN,KAEL,CAAEW,MAAM,OAMZ,OAFAlB,EAAuBmB,IAAId,EAAUK,GAE9BA,GCtBLU,CAAsB,QACpB,WAAM,uCAGNH,MAAK,SAAC,G,IAAWI,EAAI,UAAO,OAAAjB,EAAYiB,EAAKC,aAC9C,IAGD,0BAAMC,MAAO,CAAEC,gBAAiB,kBAC9B,+BAAQ,6LAYLrB,EAEG,8B,sBAA0BA,GAD1B,0BAAMsB,UAAU,SAAO,yB,kFC5BpBC,EADD,kBAAM,sBAAMH,MAAO,CAAEC,gBAAiB,QAAhC,oB,OCMpBG,QAAQC,IAAI,aCLVD,QAAQC,IAAI,qCDSd,IAASC,OAAO,mBAIhB,WACE,OACE,yBAAKN,MAAO,CAAEC,gBAAiB,W,qBACV,2BACnB,kBAAC,EAAK,MACN,kBAAC,IAAQ,CAACM,KAAK,YATA,MAAKC,SAASC,eAAe,SAElDlB,OAAOmB,OAAS,WAAM,OAAAN,QAAQC,IAAI,a","file":"menu.8ffba2ee5cd3ddf92f42.js","sourcesContent":["const debouncedPromisesCache = new Map();\n\n/**\n * Defers execution of promiseFn to some time after the window load event and caches the returned promise. \n * Can be used for lazy-loading using dynamic import\n * @param {string} cacheKey - The name for the cache entry.\n * @param {() => Promise} promiseFn - A function that returns a promise. It will only be executed once.\n * @param {timeout} [timeout = 0] - A timeout after the load event, after which the promiseFn will be executed.\n * @return {Promise}\n * \n */\nexport function debouncePromiseOnLoad(cacheKey, promiseFn, timeout = 0) {\n  if (debouncedPromisesCache.has(cacheKey)) {\n    return debouncedPromisesCache.get(cacheKey);\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    window.addEventListener(\"load\",\n      () => {\n        setTimeout(() => {\n          promiseFn().then(resolve, reject);\n        }, timeout);\n      },\n      { once: true }\n    );\n  });\n\n  debouncedPromisesCache.set(cacheKey, promise);\n\n  return promise;\n}\n\n","import React, { useEffect, useState } from \"react\";\nimport { debouncePromiseOnLoad } from \"./lazy\";\n\nexport default function WithHuge({ from }: { from: string; }) {\n  const [hugeSize, setHugeSize] = useState(0);\n\n  useEffect(() => {\n    debouncePromiseOnLoad(\"huge\",\n      () => import(\n        /* webpackChunkName: \"huge\" */\n        \"./huge\")\n    ).then(({ default: huge }) => setHugeSize(huge.length));\n  }, []);\n\n  return (\n    <span style={{ backgroundColor: \"paleturquoise\" }}>\n      <style>{`\n        .blink {\n          animation: blinker 1s linear infinite;\n        }\n\n        @keyframes blinker {\n          50% {\n            opacity: 0;\n          }\n        }\n      `}</style>\n      {\n        !hugeSize\n          ? <span className=\"blink\">Huge is loading...</span>\n          : <span>Huge loaded. Size: {hugeSize}</span>\n      }\n    </span>);\n}\n","const Small = () => <span style={{ backgroundColor: \"pink\" }}>small</span>;\nexport default Small;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Small from \"./small\";\nimport WithHuge from \"./with-huge\";\nimport somePackage from \"./some-package\";\n\nconsole.log(\"init menu\");\n\nsomePackage();\n\nReactDOM.render(<Menu />, document.getElementById(\"menu\"));\n\nwindow.onload = () => console.log(\"onload\");\n\nfunction Menu() {\n  return (\n    <div style={{ backgroundColor: \"yellow\" }}>\n      MENU Build Time - {process.env.BUILD_TIME}\n      <Small />\n      <WithHuge from=\"menu\" />\n    </div>\n  );\n}\n","export default function somePackage() {\n  console.log(\"some package loaded from index.ts\");\n}"],"sourceRoot":""}